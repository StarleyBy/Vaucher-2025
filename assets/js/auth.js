// üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è CRM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—É—á–µ—Ä–∞–º–∏

/**
 * üë§ –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
class AuthManager {
    constructor() {
        this.currentUser = null;
        this.sessionKey = 'ulpan_crm_session';
        this.testUsers = this.initializeTestUsers();
        this.sessionTimeout = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        this.init();
    }
    
    /**
     * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        this.checkSavedSession();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
        this.setupSessionCleanup();
        
        console.log('üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    initializeTestUsers() {
        return {
            admin: {
                id: 1,
                username: 'admin',
                password: 'admin123',
                role: 'ADMIN',
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
                email: 'admin@ulpan.com',
                ulpan: null,
                lastLogin: null,
                active: true
            },
            teacher1: {
                id: 2,
                username: 'teacher1',
                password: 'teach123',
                role: 'TEACHER',
                name: '–£—á–∏—Ç–µ–ª—å 1',
                email: 'teacher1@ulpan.com',
                ulpan: '–£–ª—å–ø–∞–Ω "–®–∞–ª–æ–º"',
                lastLogin: null,
                active: true
            },
            seller1: {
                id: 3,
                username: 'seller1',
                password: 'sell123',
                role: 'SELLER',
                name: '–ü—Ä–æ–¥–∞–≤–µ—Ü –≤–∞—É—á–µ—Ä–æ–≤',
                email: 'seller@ulpan.com',
                ulpan: null,
                lastLogin: null,
                active: true
            },
            ulpan1: {
                id: 4,
                username: 'ulpan1',
                password: 'ulp123',
                role: 'ULPAN',
                name: '–£–ª—å–ø–∞–Ω "–®–∞–ª–æ–º"',
                email: 'shalom@ulpan.com',
                ulpan: '–£–ª—å–ø–∞–Ω "–®–∞–ª–æ–º"',
                lastLogin: null,
                active: true
            },
            fin1: {
                id: 5,
                username: 'fin1',
                password: 'fin123',
                role: 'FINANCE',
                name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª',
                email: 'finance@ulpan.com',
                ulpan: null,
                lastLogin: null,
                active: true
            },
            curator1: {
                id: 6,
                username: 'curator1',
                password: 'cur123',
                role: 'CURATOR',
                name: '–ö—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                email: 'curator@ulpan.com',
                ulpan: null,
                lastLogin: null,
                active: true
            }
        };
    }
    
    /**
     * üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async login(username, password, rememberMe = false) {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingState();
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
            await this.delay(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const user = this.validateTestUser(username, password);
            
            if (user) {
                // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                this.currentUser = { ...user };
                this.currentUser.lastLogin = new Date().toISOString();
                this.currentUser.sessionStart = Date.now();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
                this.saveSession(rememberMe);
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                this.showNotification('success', window.CONFIG.MESSAGES.SUCCESS.LOGIN);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', this.currentUser.name);
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.redirectToMain();
                
                return { success: true, user: this.currentUser };
            } else {
                // –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('error', error.message);
            return { success: false, error: error.message };
        } finally {
            this.hideLoadingState();
        }
    }
    
    /**
     * üîì –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        try {
            const userName = this.currentUser?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.currentUser = null;
            
            // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            this.clearSession();
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('info', window.CONFIG.MESSAGES.SUCCESS.LOGOUT);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            console.log('üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', userName);
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.redirectToLogin();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        }
    }
    
    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    isAuthenticated() {
        if (!this.currentUser) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        const sessionAge = Date.now() - (this.currentUser.sessionStart || 0);
        if (sessionAge > this.sessionTimeout) {
            console.log('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
            this.logout();
            return false;
        }
        
        return true;
    }
    
    /**
     * üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    hasRole(role) {
        return this.isAuthenticated() && this.currentUser.role === role;
    }
    
    /**
     * üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     */
    hasPermission(permission) {
        if (!this.isAuthenticated()) return false;
        
        const userRole = window.CONFIG.USER_ROLES[this.currentUser.role];
        return userRole && userRole.permissions.includes(permission);
    }
    
    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }
    
    /**
     * üè´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ª—å–ø–∞–Ω—É
     */
    canAccessUlpan(ulpanName) {
        if (!this.isAuthenticated()) return false;
        
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –∫—É—Ä–∞—Ç–æ—Ä –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É–ª—å–ø–∞–Ω–∞–º
        if (this.hasRole('ADMIN') || this.hasRole('CURATOR') || this.hasRole('FINANCE')) {
            return true;
        }
        
        // –£—á–∏—Ç–µ–ª—å –∏ —É–ª—å–ø–∞–Ω –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–µ–º—É —É–ª—å–ø–∞–Ω—É
        if (this.hasRole('TEACHER') || this.hasRole('ULPAN')) {
            return this.currentUser.ulpan === ulpanName;
        }
        
        // –ü—Ä–æ–¥–∞–≤–µ—Ü –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É–ª—å–ø–∞–Ω–∞–º
        if (this.hasRole('SELLER')) {
            return true;
        }
        
        return false;
    }
    
    /**
     * üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    validateTestUser(username, password) {
        const user = this.testUsers[username];
        
        if (user && user.password === password && user.active) {
            return user;
        }
        
        return null;
    }
    
    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    saveSession(rememberMe = false) {
        const sessionData = {
            user: this.currentUser,
            timestamp: Date.now(),
            rememberMe: rememberMe
        };
        
        if (rememberMe) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            localStorage.setItem(this.sessionKey, JSON.stringify(sessionData));
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            sessionStorage.setItem(this.sessionKey, JSON.stringify(sessionData));
        }
    }
    
    /**
     * üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
     */
    checkSavedSession() {
        let sessionData = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º sessionStorage
        const sessionStorageData = sessionStorage.getItem(this.sessionKey);
        if (sessionStorageData) {
            sessionData = JSON.parse(sessionStorageData);
        } else {
            // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const localStorageData = localStorage.getItem(this.sessionKey);
            if (localStorageData) {
                sessionData = JSON.parse(localStorageData);
            }
        }
        
        if (sessionData && sessionData.user) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
            const sessionAge = Date.now() - sessionData.timestamp;
            
            if (sessionAge < this.sessionTimeout) {
                this.currentUser = sessionData.user;
                console.log('üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è:', this.currentUser.name);
                
                // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                if (this.isLoginPage()) {
                    this.redirectToMain();
                }
            } else {
                // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
                this.clearSession();
            }
        }
    }
    
    /**
     * üóë –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
     */
    clearSession() {
        localStorage.removeItem(this.sessionKey);
        sessionStorage.removeItem(this.sessionKey);
    }
    
    /**
     * üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', this.handleLoginSubmit.bind(this));
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
        document.addEventListener('click', (e) => {
            if (e.target.closest('.logout-btn')) {
                e.preventDefault();
                this.logout();
            }
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.setupActivityTracking();
    }
    
    /**
     * üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async handleLoginSubmit(event) {
        event.preventDefault();
        
        const formData = new FormData(event.target);
        const username = formData.get('username').trim();
        const password = formData.get('password');
        const rememberMe = formData.get('rememberMe') === 'on';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!username || !password) {
            this.showNotification('warning', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
            return;
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await this.login(username, password, rememberMe);
    }
    
    /**
     * üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setupActivityTracking() {
        let lastActivity = Date.now();
        
        // –°–æ–±—ã—Ç–∏—è, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
        
        const updateActivity = () => {
            lastActivity = Date.now();
        };
        
        activityEvents.forEach(event => {
            document.addEventListener(event, updateActivity, true);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        setInterval(() => {
            const inactiveTime = Date.now() - lastActivity;
            const maxInactiveTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
            
            if (this.isAuthenticated() && inactiveTime > maxInactiveTime) {
                console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
                this.showNotification('warning', '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
                this.logout();
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    /**
     * üßπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
     */
    setupSessionCleanup() {
        window.addEventListener('beforeunload', () => {
            // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ sessionStorage, localStorage –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
            if (!this.currentUser || !this.isRememberMeSession()) {
                sessionStorage.removeItem(this.sessionKey);
            }
        });
    }
    
    /**
     * üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
     */
    isRememberMeSession() {
        const localData = localStorage.getItem(this.sessionKey);
        return localData && JSON.parse(localData).rememberMe;
    }
    
    /**
     * üìç –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isLoginPage() {
        return document.querySelector('.auth-container') !== null;
    }
    
    /**
     * üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    redirectToMain() {
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const authContainer = document.querySelector('.auth-container');
        const appContainer = document.querySelector('.app-container');
        
        if (authContainer) authContainer.classList.add('hidden');
        if (appContainer) {
            appContainer.classList.remove('hidden');
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if (window.app && window.app.init) {
                window.app.init();
            }
        }
    }
    
    /**
     * üîô –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    redirectToLogin() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const authContainer = document.querySelector('.auth-container');
        const appContainer = document.querySelector('.app-container');
        
        if (authContainer) authContainer.classList.remove('hidden');
        if (appContainer) appContainer.classList.add('hidden');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        const loginForm = document.getElementById('loginForm');
        if (loginForm) loginForm.reset();
    }
    
    /**
     * ‚è≥ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingState() {
        const submitBtn = document.querySelector('.btn-login');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner"></span> –í—Ö–æ–¥...';
        }
    }
    
    /**
     * üéØ –°–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingState() {
        const submitBtn = document.querySelector('.btn-login');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '–í–æ–π—Ç–∏';
        }
    }
    
    /**
     * üì¢ –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(type, message) {
        if (typeof showNotification === 'function') {
            showNotification(type, message);
        } else {
            // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            console.log(`${type.toUpperCase()}: ${message}`);
            
            // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ alert –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (type === 'error') {
                alert(message);
            }
        }
    }
    
    /**
     * ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
     */
    getUserStats() {
        if (!this.hasRole('ADMIN')) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        
        const stats = {
            total: Object.keys(this.testUsers).length,
            active: Object.values(this.testUsers).filter(u => u.active).length,
            roles: {}
        };
        
        // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
        Object.values(this.testUsers).forEach(user => {
            if (user.active) {
                stats.roles[user.role] = (stats.roles[user.role] || 0) + 1;
            }
        });
        
        return stats;
    }
    
    /**
     * üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
     */
    manageUser(action, userData) {
        if (!this.hasRole('ADMIN')) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        
        switch (action) {
            case 'create':
                return this.createUser(userData);
            case 'update':
                return this.updateUser(userData);
            case 'deactivate':
                return this.deactivateUser(userData.id);
            case 'activate':
                return this.activateUser(userData.id);
            default:
                throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        }
    }
    
    /**
     * üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    createUser(userData) {
        const newId = Math.max(...Object.values(this.testUsers).map(u => u.id)) + 1;
        const username = userData.username.toLowerCase();
        
        if (this.testUsers[username]) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        const newUser = {
            id: newId,
            username: username,
            password: userData.password,
            role: userData.role,
            name: userData.name,
            email: userData.email,
            ulpan: userData.ulpan || null,
            lastLogin: null,
            active: true,
            createdAt: new Date().toISOString(),
            createdBy: this.currentUser.id
        };
        
        this.testUsers[username] = newUser;
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.name);
        return newUser;
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUser(userData) {
        const user = Object.values(this.testUsers).find(u => u.id === userData.id);
        
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        const allowedFields = ['name', 'email', 'role', 'ulpan'];
        allowedFields.forEach(field => {
            if (userData[field] !== undefined) {
                user[field] = userData[field];
            }
        });
        
        user.updatedAt = new Date().toISOString();
        user.updatedBy = this.currentUser.id;
        
        console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', user.name);
        return user;
    }
    
    /**
     * ‚ùå –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    deactivateUser(userId) {
        const user = Object.values(this.testUsers).find(u => u.id === userId);
        
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        user.active = false;
        user.deactivatedAt = new Date().toISOString();
        user.deactivatedBy = this.currentUser.id;
        
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', user.name);
        return user;
    }
    
    /**
     * ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    activateUser(userId) {
        const user = Object.values(this.testUsers).find(u => u.id === userId);
        
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        user.active = true;
        user.activatedAt = new Date().toISOString();
        user.activatedBy = this.currentUser.id;
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', user.name);
        return user;
    }
    
    /**
     * üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
     */
    changePassword(oldPassword, newPassword) {
        if (!this.isAuthenticated()) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
        
        const currentUserData = this.testUsers[this.currentUser.username];
        
        if (currentUserData.password !== oldPassword) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
        }
        
        if (newPassword.length < 6) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        currentUserData.password = newPassword;
        currentUserData.passwordChangedAt = new Date().toISOString();
        
        console.log('üîê –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.currentUser.name);
        this.showNotification('success', '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
        
        return true;
    }
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getAllUsers() {
        if (!this.hasRole('ADMIN')) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        
        return Object.values(this.testUsers).map(user => ({
            ...user,
            password: undefined // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        }));
    }
    
    /**
     * üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    searchUsers(query, filters = {}) {
        if (!this.hasRole('ADMIN')) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        
        let users = Object.values(this.testUsers);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
        if (query) {
            const searchTerm = query.toLowerCase();
            users = users.filter(user => 
                user.name.toLowerCase().includes(searchTerm) ||
                user.email.toLowerCase().includes(searchTerm) ||
                user.username.toLowerCase().includes(searchTerm)
            );
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏
        if (filters.role) {
            users = users.filter(user => user.role === filters.role);
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (filters.active !== undefined) {
            users = users.filter(user => user.active === filters.active);
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É–ª—å–ø–∞–Ω—É
        if (filters.ulpan) {
            users = users.filter(user => user.ulpan === filters.ulpan);
        }
        
        return users.map(user => ({
            ...user,
            password: undefined // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        }));
    }
    
    /**
     * üìä –ê—É–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∂—É—Ä–Ω–∞–ª –≤—Ö–æ–¥–æ–≤)
     */
    getLoginAudit() {
        if (!this.hasRole('ADMIN')) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        return Object.values(this.testUsers)
            .filter(user => user.lastLogin)
            .map(user => ({
                userId: user.id,
                username: user.username,
                name: user.name,
                lastLogin: user.lastLogin,
                role: user.role,
                ulpan: user.ulpan
            }))
            .sort((a, b) => new Date(b.lastLogin) - new Date(a.lastLogin));
    }
    
    /**
     * üõ° Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     */
    requirePermission(permission) {
        return (target, propertyKey, descriptor) => {
            const originalMethod = descriptor.value;
            
            descriptor.value = function(...args) {
                if (!this.hasPermission(permission)) {
                    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${permission}`);
                }
                return originalMethod.apply(this, args);
            };
            
            return descriptor;
        };
    }
    
    /**
     * üîí Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
     */
    requireRole(role) {
        return (target, propertyKey, descriptor) => {
            const originalMethod = descriptor.value;
            
            descriptor.value = function(...args) {
                if (!this.hasRole(role)) {
                    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${role}`);
                }
                return originalMethod.apply(this, args);
            };
            
            return descriptor;
        };
    }
}

/**
 * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function initializeAuth() {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.authManager = new AuthManager();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (window.authManager.isAuthenticated()) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', window.authManager.getCurrentUser().name);
    } else {
        console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setupAuthGuard();
}

/**
 * üõ° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞
 */
function setupAuthGuard() {
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const appContainer = document.querySelector('.app-container');
    const authContainer = document.querySelector('.auth-container');
    
    if (!window.authManager.isAuthenticated()) {
        if (appContainer) appContainer.classList.add('hidden');
        if (authContainer) authContainer.classList.remove('hidden');
    } else {
        if (authContainer) authContainer.classList.add('hidden');
        if (appContainer) appContainer.classList.remove('hidden');
    }
}

/**
 * üé≠ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function requireAuth(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    
    descriptor.value = function(...args) {
        if (!window.authManager || !window.authManager.isAuthenticated()) {
            window.authManager.showNotification('error', '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            window.authManager.redirectToLogin();
            return;
        }
        return originalMethod.apply(this, args);
    };
    
    return descriptor;
}

/**
 * üîê –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
const AuthUtils = {
    /**
     * üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
     */
    generatePassword(length = 12) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
        let password = '';
        
        for (let i = 0; i < length; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        return password;
    },
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
     */
    validatePassword(password) {
        const minLength = 6;
        const hasUpperCase = /[A-Z]/.test(password);
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /\d/.test(password);
        
        const errors = [];
        
        if (password.length < minLength) {
            errors.push(`–ú–∏–Ω–∏–º—É–º ${minLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        }
        
        if (!hasLowerCase) {
            errors.push('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞');
        }
        
        if (!hasNumbers) {
            errors.push('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞');
        }
        
        return {
            valid: errors.length === 0,
            errors: errors,
            strength: this.getPasswordStrength(password)
        };
    },
    
    /**
     * üí™ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
     */
    getPasswordStrength(password) {
        let score = 0;
        
        if (password.length >= 8) score++;
        if (password.length >= 12) score++;
        if (/[a-z]/.test(password)) score++;
        if (/[A-Z]/.test(password)) score++;
        if (/[0-9]/.test(password)) score++;
        if (/[^A-Za-z0-9]/.test(password)) score++;
        
        if (score < 3) return '–°–ª–∞–±—ã–π';
        if (score < 5) return '–°—Ä–µ–¥–Ω–∏–π';
        return '–°–∏–ª—å–Ω—ã–π';
    },
    
    /**
     * üè∑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    getRoleName(roleKey) {
        const role = window.CONFIG?.USER_ROLES[roleKey];
        return role ? role.name : roleKey;
    },
    
    /**
     * üé® –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–æ–ª–∏
     */
    getRoleColor(roleKey) {
        const colors = {
            ADMIN: 'danger',
            TEACHER: 'success',
            SELLER: 'warning',
            ULPAN: 'info',
            FINANCE: 'primary',
            CURATOR: 'secondary'
        };
        
        return colors[roleKey] || 'secondary';
    }
};

// üåê –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.AuthManager = AuthManager;
    window.AuthUtils = AuthUtils;
    window.requireAuth = requireAuth;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeAuth);
    } else {
        initializeAuth();
    }
}

console.log('üîê –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
