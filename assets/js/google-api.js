// üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google APIs –¥–ª—è CRM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—É—á–µ—Ä–∞–º–∏

/**
 * üåê –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google APIs
 */
class GoogleAPIManager {
    constructor() {
        this.isInitialized = false;
        this.isSignedIn = false;
        this.gapi = null;
        this.auth2 = null;
        this.sheetsAPI = null;
        this.driveAPI = null;
        this.cache = new Map();
        this.cacheTimeout = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
        
        console.log('üîó Google API Manager —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google APIs
     */
    async initialize() {
        try {
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google APIs...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Google API —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (!window.gapi) {
                await this.loadGoogleAPI();
            }
            
            this.gapi = window.gapi;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            await this.loadGoogleLibraries();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            await this.initializeGoogleClient();
            
            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä auth2
            this.auth2 = this.gapi.auth2.getAuthInstance();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.isSignedIn = this.auth2.isSignedIn.get();
            
            this.isInitialized = true;
            console.log('‚úÖ Google APIs –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google APIs:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google APIs: ${error.message}`);
        }
    }
    
    /**
     * üìö –ó–∞–≥—Ä—É–∑–∫–∞ Google API —Å–∫—Ä–∏–ø—Ç–∞
     */
    loadGoogleAPI() {
        return new Promise((resolve, reject) => {
            if (window.gapi) {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = 'https://apis.google.com/js/api.js';
            script.onload = resolve;
            script.onerror = () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google API —Å–∫—Ä–∏–ø—Ç'));
            document.head.appendChild(script);
        });
    }
    
    /**
     * üìñ –ó–∞–≥—Ä—É–∑–∫–∞ Google –±–∏–±–ª–∏–æ—Ç–µ–∫
     */
    loadGoogleLibraries() {
        return new Promise((resolve, reject) => {
            this.gapi.load('client:auth2', {
                callback: resolve,
                onerror: () => reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'))
            });
        });
    }
    
    /**
     * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google –∫–ª–∏–µ–Ω—Ç–∞
     */
    async initializeGoogleClient() {
        const config = window.CONFIG?.GOOGLE_CONFIG;
        
        if (!config) {
            throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (!config.API_KEY || config.API_KEY === 'YOUR_GOOGLE_API_KEY_HERE') {
            throw new Error('Google API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
        
        if (!config.CLIENT_ID || config.CLIENT_ID.includes('YOUR_GOOGLE_CLIENT_ID')) {
            throw new Error('Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
        
        await this.gapi.client.init({
            apiKey: config.API_KEY,
            clientId: config.CLIENT_ID,
            discoveryDocs: config.DISCOVERY_DOCS,
            scope: config.SCOPES.join(' ')
        });
    }
    
    /**
     * üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google
     */
    async signIn() {
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }
            
            if (this.isSignedIn) {
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Google');
                return true;
            }
            
            console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google...');
            
            const authResult = await this.auth2.signIn();
            this.isSignedIn = true;
            
            const profile = authResult.getBasicProfile();
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google:', profile.getName());
            
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google: ${error.error || error.message}`);
        }
    }
    
    /**
     * üîì –í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    async signOut() {
        try {
            if (this.auth2 && this.isSignedIn) {
                await this.auth2.signOut();
                this.isSignedIn = false;
                console.log('üîì –í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ Google:', error);
        }
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
     */
    async getSheetData(sheetName, range = null) {
        try {
            await this.ensureAuthorized();
            
            const config = window.CONFIG?.GOOGLE_CONFIG;
            const sheetConfig = window.CONFIG?.SHEET_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            const sheetRange = range || sheetConfig?.[sheetName]?.range || 'A:Z';
            const fullRange = `${sheetName}!${sheetRange}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cacheKey = `sheet_${sheetName}_${sheetRange}`;
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞:', sheetName);
                return cachedData;
            }
            
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', fullRange);
            
            const response = await this.gapi.client.sheets.spreadsheets.values.get({
                spreadsheetId: config.SPREADSHEET_ID,
                range: fullRange,
                valueRenderOption: 'UNFORMATTED_VALUE',
                dateTimeRenderOption: 'FORMATTED_STRING'
            });
            
            const data = {
                range: response.result.range,
                values: response.result.values || [],
                timestamp: Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.saveToCache(cacheKey, data);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.values.length, '—Å—Ç—Ä–æ–∫');
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
        }
    }
    
    /**
     * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
     */
    async saveSheetData(sheetName, range, values, valueInputOption = 'USER_ENTERED') {
        try {
            await this.ensureAuthorized();
            
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            const fullRange = `${sheetName}!${range}`;
            
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets:', fullRange);
            
            const response = await this.gapi.client.sheets.spreadsheets.values.update({
                spreadsheetId: config.SPREADSHEET_ID,
                range: fullRange,
                valueInputOption: valueInputOption,
                resource: {
                    values: values
                }
            });
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            this.clearSheetCache(sheetName);
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —è—á–µ–µ–∫:', response.result.updatedCells);
            return response.result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
        }
    }
    
    /**
     * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets
     */
    async appendSheetData(sheetName, values, valueInputOption = 'USER_ENTERED') {
        try {
            await this.ensureAuthorized();
            
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets:', sheetName);
            
            const response = await this.gapi.client.sheets.spreadsheets.values.append({
                spreadsheetId: config.SPREADSHEET_ID,
                range: `${sheetName}!A:A`,
                valueInputOption: valueInputOption,
                insertDataOption: 'INSERT_ROWS',
                resource: {
                    values: [values]
                }
            });
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            this.clearSheetCache(sheetName);
            
            console.log('‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —è—á–µ–µ–∫:', response.result.updatedCells);
            return response.result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É: ${error.message}`);
        }
    }
    
    /**
     * üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets
     */
    async deleteSheetRow(sheetName, rowIndex) {
        try {
            await this.ensureAuthorized();
            
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            console.log('üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets:', sheetName, '—Å—Ç—Ä–æ–∫–∞', rowIndex);
            
            // –ü–æ–ª—É—á–∞–µ–º ID –ª–∏—Å—Ç–∞
            const sheetId = await this.getSheetId(sheetName);
            
            const response = await this.gapi.client.sheets.spreadsheets.batchUpdate({
                spreadsheetId: config.SPREADSHEET_ID,
                resource: {
                    requests: [{
                        deleteDimension: {
                            range: {
                                sheetId: sheetId,
                                dimension: 'ROWS',
                                startIndex: rowIndex - 1, // 0-based index
                                endIndex: rowIndex
                            }
                        }
                    }]
                }
            });
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            this.clearSheetCache(sheetName);
            
            console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            return response.result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Google Sheets:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É: ${error.message}`);
        }
    }
    
    /**
     * üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive
     */
    async uploadFileToDrive(file, fileName, folderId, description = '') {
        try {
            await this.ensureAuthorized();
            
            console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive:', fileName);
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            const metadata = {
                name: fileName,
                parents: folderId ? [folderId] : undefined,
                description: description
            };
            
            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const form = new FormData();
            form.append('metadata', new Blob([JSON.stringify(metadata)], {
                type: 'application/json'
            }));
            form.append('file', file);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token}`
                },
                body: form
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive:', result.id);
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Google Drive:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ Google Drive
     */
    async getFilesFromDriveFolder(folderId, pageSize = 100) {
        try {
            await this.ensureAuthorized();
            
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ Google Drive:', folderId);
            
            const response = await this.gapi.client.drive.files.list({
                q: `'${folderId}' in parents and trashed=false`,
                pageSize: pageSize,
                fields: 'files(id,name,mimeType,createdTime,modifiedTime,size,webViewLink,thumbnailLink)'
            });
            
            const files = response.result.files || [];
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', files.length);
            
            return files;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
        }
    }
    
    /**
     * üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive
     */
    async deleteFileFromDrive(fileId) {
        try {
            await this.ensureAuthorized();
            
            console.log('üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive:', fileId);
            
            await this.gapi.client.drive.files.delete({
                fileId: fileId
            });
            
            console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Google Drive');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${error.message}`);
        }
    }
    
    /**
     * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ª–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    async getSheetId(sheetName) {
        try {
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            const response = await this.gapi.client.sheets.spreadsheets.get({
                spreadsheetId: config.SPREADSHEET_ID
            });
            
            const sheet = response.result.sheets.find(s => s.properties.title === sheetName);
            
            if (!sheet) {
                throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            return sheet.properties.sheetId;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ª–∏—Å—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üèó –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
     */
    async createSheet(sheetName, headers = []) {
        try {
            await this.ensureAuthorized();
            
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            if (!config?.SPREADSHEET_ID) {
                throw new Error('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }
            
            console.log('üèó –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:', sheetName);
            
            // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
            const response = await this.gapi.client.sheets.spreadsheets.batchUpdate({
                spreadsheetId: config.SPREADSHEET_ID,
                resource: {
                    requests: [{
                        addSheet: {
                            properties: {
                                title: sheetName
                            }
                        }
                    }]
                }
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if (headers.length > 0) {
                await this.saveSheetData(sheetName, 'A1', [headers]);
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
                const sheetId = response.result.replies[0].addSheet.properties.sheetId;
                await this.formatSheetHeaders(sheetId, headers.length);
            }
            
            console.log('‚úÖ –õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', sheetName);
            return response.result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞:', error);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç: ${error.message}`);
        }
    }
    
    /**
     * üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ª–∏—Å—Ç–∞
     */
    async formatSheetHeaders(sheetId, headerCount) {
        try {
            const config = window.CONFIG?.GOOGLE_CONFIG;
            
            const response = await this.gapi.client.sheets.spreadsheets.batchUpdate({
                spreadsheetId: config.SPREADSHEET_ID,
                resource: {
                    requests: [{
                        repeatCell: {
                            range: {
                                sheetId: sheetId,
                                startRowIndex: 0,
                                endRowIndex: 1,
                                startColumnIndex: 0,
                                endColumnIndex: headerCount
                            },
                            cell: {
                                userEnteredFormat: {
                                    textFormat: {
                                        bold: true
                                    },
                                    backgroundColor: {
                                        red: 0.9,
                                        green: 0.9,
                                        blue: 0.9
                                    }
                                }
                            },
                            fields: 'userEnteredFormat(textFormat,backgroundColor)'
                        }
                    }]
                }
            });
            
            return response.result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error);
        }
    }
    
    /**
     * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async ensureAuthorized() {
        if (!this.isInitialized) {
            await this.initialize();
        }
        
        if (!this.isSignedIn) {
            await this.signIn();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        const authInstance = this.gapi.auth2.getAuthInstance();
        const user = authInstance.currentUser.get();
        const authResponse = user.getAuthResponse();
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (authResponse.expires_at - Date.now() < 5 * 60 * 1000) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...');
            await user.reloadAuthResponse();
        }
    }
    
    /**
     * üíæ –†–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º
     */
    saveToCache(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
    }
    
    getFromCache(key) {
        const cached = this.cache.get(key);
        
        if (!cached) return null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
        if (Date.now() - cached.timestamp > this.cacheTimeout) {
            this.cache.delete(key);
            return null;
        }
        
        return cached.data;
    }
    
    clearCache() {
        this.cache.clear();
        console.log('üóë –ö—ç—à –æ—á–∏—â–µ–Ω');
    }
    
    clearSheetCache(sheetName) {
        const keysToDelete = [];
        for (const [key] of this.cache) {
            if (key.includes(`sheet_${sheetName}`)) {
                keysToDelete.push(key);
            }
        }
        
        keysToDelete.forEach(key => this.cache.delete(key));
        console.log(`üóë –ö—ç—à –ª–∏—Å—Ç–∞ "${sheetName}" –æ—á–∏—â–µ–Ω`);
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    getAPIStats() {
        return {
            cacheSize: this.cache.size,
            cacheHits: this.cacheHits || 0,
            apiCalls: this.apiCalls || 0,
            lastCall: this.lastCallTime || null,
            isInitialized: this.isInitialized,
            isSignedIn: this.isSignedIn
        };
    }
}

/**
 * üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ–Ω–∏–∫–∞–º–∏
 */
class StudentsDataManager {
    constructor(googleAPI) {
        this.googleAPI = googleAPI;
        this.sheetName = '–£—á–µ–Ω–∏–∫–∏';
        this.headers = window.CONFIG?.SHEET_CONFIG?.MAIN_SHEET?.headers || [];
    }
    
    /**
     * üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
     */
    async getAllStudents() {
        try {
            const data = await this.googleAPI.getSheetData(this.sheetName);
            
            if (!data.values || data.values.length === 0) {
                return [];
            }
            
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            const headers = data.values[0];
            const rows = data.values.slice(1);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã
            const students = rows.map((row, index) => {
                const student = { rowIndex: index + 2 }; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å 0-based –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                
                headers.forEach((header, colIndex) => {
                    student[header] = row[colIndex] || '';
                });
                
                return student;
            });
            
            console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', students.length);
            return students;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
            throw error;
        }
    }
    
    /**
     * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
     */
    async addStudent(studentData) {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            const values = this.headers.map(header => {
                if (header === 'ID') {
                    return this.generateStudentId();
                } else if (header === '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è') {
                    return new Date().toLocaleDateString('ru-RU');
                } else if (header === '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ') {
                    return new Date().toLocaleDateString('ru-RU');
                } else if (header === '–ò–∑–º–µ–Ω–∏–ª') {
                    return window.authManager?.getCurrentUser()?.name || '–°–∏—Å—Ç–µ–º–∞';
                } else {
                    return studentData[header] || '';
                }
            });
            
            const result = await this.googleAPI.appendSheetData(this.sheetName, values);
            
            console.log('‚ûï –°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞
     */
    async updateStudent(rowIndex, studentData) {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            const values = [this.headers.map(header => {
                if (header === '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ') {
                    return new Date().toLocaleDateString('ru-RU');
                } else if (header === '–ò–∑–º–µ–Ω–∏–ª') {
                    return window.authManager?.getCurrentUser()?.name || '–°–∏—Å—Ç–µ–º–∞';
                } else {
                    return studentData[header] !== undefined ? studentData[header] : '';
                }
            })];
            
            const range = `A${rowIndex}:${this.getColumnLetter(this.headers.length)}${rowIndex}`;
            const result = await this.googleAPI.saveSheetData(this.sheetName, range, values);
            
            console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üóë –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
     */
    async deleteStudent(rowIndex) {
        try {
            const result = await this.googleAPI.deleteSheetRow(this.sheetName, rowIndex);
            
            console.log('üóë –°—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üîç –ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–æ–≤
     */
    async searchStudents(query, filters = {}) {
        try {
            const allStudents = await this.getAllStudents();
            
            let filteredStudents = allStudents;
            
            // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            if (query && query.trim()) {
                const searchTerm = query.toLowerCase();
                filteredStudents = filteredStudents.filter(student => {
                    return (
                        student['–§–ò–û']?.toLowerCase().includes(searchTerm) ||
                        student['–¢–µ–ª–µ—Ñ–æ–Ω']?.toLowerCase().includes(searchTerm) ||
                        student['Email']?.toLowerCase().includes(searchTerm) ||
                        student['–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ']?.toLowerCase().includes(searchTerm) ||
                        student['–ù–æ–º–µ—Ä –≤–∞—É—á–µ—Ä–∞']?.toLowerCase().includes(searchTerm)
                    );
                });
            }
            
            // –§–∏–ª—å—Ç—Ä—ã
            Object.keys(filters).forEach(key => {
                if (filters[key]) {
                    filteredStudents = filteredStudents.filter(student => 
                        student[key] === filters[key]
                    );
                }
            });
            
            return filteredStudents;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
            throw error;
        }
    }
    
    /**
     * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è —É—á–µ–Ω–∏–∫–∞
     */
    generateStudentId() {
        return 'STD_' + Date.now() + '_' + Math.random().toString(36).substr(2, 5).toUpperCase();
    }
    
    /**
     * üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –±—É–∫–≤—ã –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     */
    getColumnLetter(columnIndex) {
        let letter = '';
        while (columnIndex > 0) {
            const remainder = (columnIndex - 1) % 26;
            letter = String.fromCharCode(65 + remainder) + letter;
            columnIndex = Math.floor((columnIndex - 1) / 26);
        }
        return letter;
    }
}

/**
 * üìÅ –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤ Google Drive
 */
class DocumentManager {
    constructor(googleAPI) {
        this.googleAPI = googleAPI;
        this.folders = window.CONFIG?.DRIVE_FOLDERS || {};
    }
    
    /**
     * üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    async uploadDocument(file, documentType, studentId, additionalInfo = {}) {
        try {
            const docConfig = window.CONFIG?.DOCUMENT_TYPES?.[documentType];
            
            if (!docConfig) {
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentType}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if (file.size > docConfig.maxSize) {
                throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: ${(docConfig.maxSize / 1024 / 1024).toFixed(1)}MB`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            const fileExtension = file.name.split('.').pop().toLowerCase();
            if (!docConfig.formats.includes(fileExtension)) {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ${docConfig.formats.join(', ')}`);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const folderId = this.folders[docConfig.folder];
            if (!folderId) {
                throw new Error(`–ü–∞–ø–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${documentType} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            const timestamp = new Date().toISOString().slice(0, 10);
            const fileName = `${studentId}_${documentType}_${timestamp}.${fileExtension}`;
            
            // –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            const description = `${docConfig.name} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId}. ${JSON.stringify(additionalInfo)}`;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const result = await this.googleAPI.uploadFileToDrive(file, fileName, folderId, description);
            
            console.log('üì§ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', fileName);
            return {
                fileId: result.id,
                fileName: fileName,
                fileUrl: result.webViewLink,
                documentType: documentType,
                uploadDate: new Date().toISOString(),
                fileSize: file.size
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
     */
    async getStudentDocuments(studentId) {
        try {
            const allDocuments = [];
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for (const [docType, folderId] of Object.entries(this.folders)) {
                try {
                    const files = await this.googleAPI.getFilesFromDriveFolder(folderId);
                    
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
                    const studentFiles = files.filter(file => 
                        file.name.includes(studentId)
                    );
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    studentFiles.forEach(file => {
                        file.documentType = docType;
                        file.documentTypeName = this.getDocumentTypeName(docType);
                    });
                    
                    allDocuments.push(...studentFiles);
                    
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ ${docType}:`, error);
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            allDocuments.sort((a, b) => new Date(b.createdTime) - new Date(a.createdTime));
            
            return allDocuments;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    async deleteDocument(fileId) {
        try {
            await this.googleAPI.deleteFileFromDrive(fileId);
            console.log('üóë –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }
    
    /**
     * üè∑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
     */
    getDocumentTypeName(docType) {
        const docConfig = window.CONFIG?.DOCUMENT_TYPES?.[docType];
        return docConfig ? docConfig.name : docType;
    }
}

/**
 * üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
 */
async function initializeGoogleAPI() {
    try {
        // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google API
        window.googleAPI = new GoogleAPIManager();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        window.studentsManager = new StudentsDataManager(window.googleAPI);
        window.documentsManager = new DocumentManager(window.googleAPI);
        
        console.log('üöÄ Google API –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (typeof showNotification === 'function') {
            showNotification('warning', 'Google API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.');
        }
        
        return false;
    }
}

// üåê –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
    window.GoogleAPIManager = GoogleAPIManager;
    window.StudentsDataManager = StudentsDataManager;
    window.DocumentManager = DocumentManager;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeGoogleAPI);
    } else {
        initializeGoogleAPI();
    }
}

console.log('üîó –ú–æ–¥—É–ª—å Google API –∑–∞–≥—Ä—É–∂–µ–Ω');
